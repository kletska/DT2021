\import Function
\import Paths \hiding (transport)
\import Paths.Meta
\import Utils
\import lect01 (+)
\import lect04 (+-comm, +')
\import lect05 (Nat-elim, Nat-rec, v++-assoc)

-- 1. Определите факториал через Nat-rec.
\func fac' : Nat -> Nat =>
  Nat-rec _ 1 (\lam n rec => (suc n) * rec)

-- 2. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.
\func +-assoc (m n k : Nat) : (m + n) + k = m + (n + k) =>
  Nat-elim (\lam k => (m + n) + k = m + (n + k)) idp (\lam _ => suc `pmap`) k

-- 3. Определите рекурсор и элиминатор для D.
\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-elim (P : D -> \Type)
             (p : \Pi (n : Nat) -> P (con1 n))
             (q : \Pi (d d' : D) -> P d -> P d' -> P (con2 d d'))
             (r : \Pi (f : Nat -> D) -> (\Pi (n : Nat) -> P (f n)) -> P (con3 f))
             (d : D) : P d \elim d
  | con1 n => p n
  | con2 b b' => q b b' (D-elim P p q r b) (D-elim P p q r b')
  | con3 stream => r stream (\lam n => D-elim P p q r (stream n))

\func D-rec (P : \Type) (p : Nat -> P) (q : D -> D -> P -> P -> P) (r : (Nat -> D) -> (Nat -> P) -> P) (d : D) : P =>
  D-elim (\lam _ => P) p q r d

{- To check that the definition of D-elim and D-rec is correct, you can try to implement foo using D-rec.
\func foo (d : D) : Nat
  | con1 n => n
  | con2 d1 d2 => foo d1 Nat.+ foo d2
  | con3 g => foo (g (foo (g 100)))
-}
\func foo' : D -> Nat =>
  D-rec Nat id (\lam _ _ n m => n + m) (\lam g f => f (f 100))

-- 4. Определите рекурсор и элиминатор для List.
\func List-elim {A : \Type} (P : List A -> \Type)
                (Nil : P nil)
                (Cons : \Pi (x : A) -> \Pi (xs : List A) -> P xs -> P (x :: xs))
                (list : List A) : P list \elim list
  | nil => Nil
  | :: head tail => Cons head tail (List-elim P Nil Cons tail)

\func List-rec {A : \Type} (P : \Type) (p : P) (q : A -> List A -> P -> P) (list : List A) : P => List-elim {A} (\lam _ => P) p q list

-- 5. Докажите pmap при помощи паттерн матчинга с idp.
\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp

-- Optional:
-- 6. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.
\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p =>
  J (B a) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- a. Выразите transport через Jalt.
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- c. Используя эти две конструкции, легко определить J.
\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  Jalt (\lam x x' _ => B x -> B x') (\lam _ => id) p b

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a, idp) = {\Sigma (x : A) (a = x)} p =>
  Jalt (\lam a a' p1 => (a, idp) = {\Sigma (x : A) (a = x)} (a', p1)) (\lam _ => idp) p.2

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p =>
  transport'' (\lam pair => B pair.1 pair.2) (sigma-contr (a', p)) b

-- 7. Докажите, что (\lam x => not (not x)) = (\lam x => x).
\func notNotId : (not o not) = id =>
  ext (\lam x => \case \elim x \with {
    | true => idp
    | false => idp
  })

-- 8. Докажите, что fac не равен suc.
\open Nat (*)

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func fac/=suc (p : fac = suc) : Empty =>
  \let
    | kusa (p : 1 = 2) : Empty => \case p \with {}
  \in
    kusa (pmap (\lam f => f 1) p)

-- 9. Докажите, что left = right, не используя transport, coe и паттерн матчинг с idp.
\func left=right : left = right =>
  path id

-- 10. Докажите, что если a = a' и b = b', то (a,b) = (a',b'), не используя transport, coe и паттерн матчинг с idp.
\func pairEq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a, b) = (a', b') =>
  path (\lam i => (p @ i, q @ i))

-- 11. Докажите, что если p = p', то p.1 = p'.1, не используя transport, coe и паттерн матчинг с idp.
\func projEq {A : \Type} (B : A -> \Type) {p p' : \Sigma (x : A) (B x)} (t : p = p') : p.1 = p'.1 =>
  path (\lam i => (t @ i).1)

-- 12. Докажите pmap2, не используя transport, coe и паттерн матчинг с idp.
\func pmap2' {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  path (\lam i => f (p @ i) (q @ i))

-- 13. Мы видели как определить transport через coe. Определите частный случай coe через transport.
\func coe0 (A : I -> \Type) (a : A left) : A right =>
  transport A (path id) a

-- 14. Определите функцию B right -> B left.
\func Itr' {B : I -> \Type} (b : B right) : B left =>
  transport B (inv left=right) b

-- 15. Докажите, что vnil является нейтральным элементом для v++.
\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons x xs => (v++-assoc.transport-vcons x _ (+-comm 0 n)) *> (pmap (vcons x) (vnil-rightId xs))
  \where {
    \func \infixl 4 v++ {A : \Type} {n m : Nat} (xs : Vec A n) (ys : Vec A m) : Vec A (m +' n) \elim n, xs
      | 0, vnil => ys
      | suc n, vcons x xs => vcons x (xs v++ ys)
  }