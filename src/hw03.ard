\import Function.Meta
\import Paths.Meta
\import Utils
\import lect03

\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.
\func fileTest-normalform : fileTest = (foobar, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.
\func M5-t'''-normalform : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.
\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
    | nil => idp
    | :: a xs => pmap (\lam li => a :: li) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.
\func reverse {A : \Type} (xs : List A) : List A \elim xs
    | nil => nil
    | :: x xs => (reverse xs) ++ (x :: nil)

-- Это утверждение будет полезно для доказательства.
\func lemma-four {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
    | nil => idp
    | (:: x xs) => pmap (x ::) (lemma-four xs)


\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
    | nil => lemma-four (reverse ys)
    | (:: x xs) => pmap (`++` (x :: nil)) (reverse++ xs ys) *> (++-assoc (reverse ys) (reverse xs) (x :: nil))

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
    | nil => idp 
    | (:: x xs) => reverse++ (reverse xs) (x :: nil) *> (pmap (x ::) (reverse-isInvolutive xs))

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.
\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
    | 0 => idp
    | suc n => \let | step0 => (rdistr n m k)
                    | step1 => pmap (`+` (m + k)) step0
                    | step2 => rewrite (+-assoc (m * n) (k * n) (m + k)) step1
                    | step3 => rewrite (pmap (m * n `+`) (+-comm (k * n) (m + k))) step2
                    | step4 => rewrite (pmap (m * n `+`) (+-assoc m k (k * n))) step3
                    | step5 => rewrite (pmap (\lam x => m * n + (m + x)) (+-comm k (k * n))) step4
                    | step6 => rewriteI (+-assoc (m * n) m (k * n + k)) step5
    \in step6

\func lemma-five-one (n : Nat) : 0 * n = 0 \elim n
    | 0 => idp
    | suc n => lemma-five-one n

\func lemma-five-two (n m : Nat) : suc n * m = n * m + m \elim m
  | 0 => idp
  | suc m =>
  suc (suc n * m + n) ==< pmap (\lam p => suc (p + n)) (lemma-five-two n m) >==
  suc (n * m + m + n) ==< pmap suc (+-assoc (n * m) m n) >==
  suc (n * m + (m + n)) ==< pmap (\lam p => suc (n * m + p)) (+-comm m n) >==
  suc (n * m + (n + m)) ==< pmap suc (sym (+-assoc (n * m) n m)) >==
  suc (n * m + n + m) `qed

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim n
    | 0 => 
    0 * (m + k) ==< lemma-five-one (m + k) >==
    0 + 0 ==< pmap (0 `+`) (sym (lemma-five-one k)) >==
    0 + 0 * k  ==< pmap (`+` 0 * k) (sym (lemma-five-one m)) >==
    0 * m + 0 * k `qed
    | suc n => 
    suc n * (m + k) ==< lemma-five-two n (m + k) >==
    n * (m + k) + (m + k) ==< pmap (n * (m + k) `+`) (+-comm m k) >==
    n * (m + k) + (k + m) ==< pmap (`+` (k + m)) (ldistr n m k) >==
    n * m + n * k + (k + m) ==< sym (+-assoc (n * m + n * k) k m) >==
    n * m + n * k + k + m ==< pmap (`+` m) (+-assoc (n * m) (n * k) k) >==
    n * m + (n * k + k) + m ==< pmap (\lam p => n * m + p + m) (sym (lemma-five-two n k)) >==
    n * m + suc n * k + m ==< +-assoc (n * m) (suc n * k) m >==
    n * m + (suc n * k + m) ==< pmap (n * m `+`) (+-comm (suc n * k) m) >==
    n * m + (m + suc n * k) ==< sym (+-assoc (n * m) m (suc n * k)) >==
    n * m + m + suc n * k ==< pmap (`+` suc n * k) (sym (lemma-five-two n m)) >==
    suc n * m + suc n * k `qed 

